<?php

namespace App\Console\Commands;

use Illuminate\Support\Facades\DB;
use Illuminate\Console\Command;
use Illuminate\Support\Str;
use Illuminate\Support\Facades\File;

class GenerateTypescriptModels extends Command
{
    protected $signature = 'generate:ts-models';
    protected $description = 'Generate TypeScript interfaces from DB schema';

    public function handle()
    {
        $database = env('DB_DATABASE');
        $this->info("Generating TypeScript models from database: $database");

        $tables = $this->getTables($database);
        $foreignKeys = $this->getForeignKeys($database);

        $fksByTable = $this->groupForeignKeysByTable($foreignKeys);
        $fksByReferencedTable = $this->groupForeignKeysByReferencedTable($foreignKeys);

        $allInterfaces = "// Auto-generated by generate:ts-models\n\n";

        foreach ($tables as $table) {
            $tableName = $table->TABLE_NAME;
            $interfaceName = $this->getInterfaceName($tableName);
            $columns = $this->getColumns($database, $tableName);

            $allInterfaces .= $this->generateInterface(
                $interfaceName,
                $columns,
                $fksByTable[$tableName] ?? [],
                $fksByReferencedTable[$tableName] ?? []
            );
        }

        $filePath = base_path('src/types/models/models.ts');
        File::put($filePath, $allInterfaces);

        $this->info("TypeScript models generated successfully at: $filePath");
    }

    protected function getTables(string $database): array
    {
        return DB::select("
            SELECT TABLE_NAME
            FROM information_schema.tables
            WHERE table_schema = ?
            AND TABLE_TYPE = 'BASE TABLE'
        ", [$database]);
    }

    protected function getForeignKeys(string $database): array
    {
        return DB::select("
            SELECT TABLE_NAME, COLUMN_NAME, REFERENCED_TABLE_NAME, REFERENCED_COLUMN_NAME
            FROM information_schema.key_column_usage
            WHERE table_schema = ?
            AND REFERENCED_TABLE_NAME IS NOT NULL
        ", [$database]);
    }

    protected function groupForeignKeysByTable(array $foreignKeys): array
    {
        $grouped = [];
        foreach ($foreignKeys as $fk) {
            $grouped[$fk->TABLE_NAME][] = $fk;
        }
        return $grouped;
    }

    protected function groupForeignKeysByReferencedTable(array $foreignKeys): array
    {
        $grouped = [];
        foreach ($foreignKeys as $fk) {
            $grouped[$fk->REFERENCED_TABLE_NAME][] = $fk;
        }
        return $grouped;
    }

    protected function getColumns(string $database, string $tableName): array
    {
        return DB::select("
            SELECT COLUMN_NAME, DATA_TYPE, IS_NULLABLE
            FROM information_schema.columns
            WHERE table_schema = ? AND table_name = ?
        ", [$database, $tableName]);
    }

    protected function getInterfaceName(string $tableName): string
    {
        return Str::studly(Str::singular($tableName));
    }

    protected function generateInterface(
        string $interfaceName,
        array $columns,
        array $belongsToFKs,
        array $hasManyFKs
    ): string {
        $interface = "export interface $interfaceName {\n";

        // Add columns
        foreach ($columns as $col) {
            $tsType = $this->mapSqlTypeToTs($col->DATA_TYPE);
            $nullable = $col->IS_NULLABLE === 'YES' ? ' | null' : '';
            $interface .= "  {$col->COLUMN_NAME}: $tsType$nullable;\n";
        }

        // Add belongsTo relations
        foreach ($belongsToFKs as $fk) {
            $propertyName = Str::camel(str_replace('_id', '', $fk->COLUMN_NAME));
            $relatedInterface = $this->getInterfaceName($fk->REFERENCED_TABLE_NAME);
            $interface .= "  $propertyName?: $relatedInterface;\n";
        }

        // Add hasMany relations
        foreach ($hasManyFKs as $fk) {
            $relatedTable = $fk->TABLE_NAME;
            $relatedInterface = $this->getInterfaceName($relatedTable);
            $propertyName = Str::camel(Str::plural($relatedTable));
            $interface .= "  $propertyName?: {$relatedInterface}[];\n";
        }

        $interface .= "}\n\n";

        return $interface;
    }

    protected function mapSqlTypeToTs(string $sqlType): string
    {
        $typeMap = [
            'int' => 'number',
            'bigint' => 'number',
            'smallint' => 'number',
            'tinyint' => 'number',
            'mediumint' => 'number',
            'decimal' => 'number',
            'float' => 'number',
            'double' => 'number',
            'real' => 'number',
            'varchar' => 'string',
            'char' => 'string',
            'text' => 'string',
            'mediumtext' => 'string',
            'longtext' => 'string',
            'date' => 'string',
            'datetime' => 'string',
            'timestamp' => 'string',
            'time' => 'string',
            'json' => 'any',
            'boolean' => 'boolean',
            'bit' => 'boolean',
        ];

        return $typeMap[strtolower($sqlType)] ?? 'any';
    }
}
